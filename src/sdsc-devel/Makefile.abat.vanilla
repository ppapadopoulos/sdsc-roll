# This Makefile provides targets for building and testing unrestricted rolls
# from the SDSC roll stack using compilers from the SDSC gnucompiler-roll,
# rocks-openmpi from the Rocks hpc-roll, and the MKL libraries from the SDSC
# intel-roll.  Roll sources are retrieved from the SDSC github site.  Build
# and test timings are results are directed to a timestamped log file; detailed
# build output is allowed to flow to stdout.
#
# This Makefile defines these targets:
#
# (default) - build and test all rolls
#
# clean - uninstall and purge all rolls
#
# %-build-and-test - build and run the roll test for a single roll

# URL used for roll git clone
GIT_URL = https://github.com/sdsc/$(1)-roll.git

# Overrides of RollStack.mk default values
DEFAULT_GET = git clone $(GIT_URL)
DEFAULT_PUT = git commit
DEFAULT_ROLLOPTS =

# ROLL{COMPILER,MPI} values for multi-{compiler,mpi} rolls
MULTI_COMPILER = gnu
MULTI_MPI = rocks-openmpi

# Roll-specific ROLLOPTS values
amber_ROLLOPTS = $(DEFAULT_ROLLOPTS) cuda

include $(SDSCDEVEL)/RollStack.mk
include $(SDSCDEVEL)/CommonRolls.mk

# Test user for packages where testing by root fails beccause of openmpi
# restrictions.  The mysql user is present by default on Rocks systems.
gamess_USER = mysql
nwchem_USER = mysql

# data-transfer.t can only be run successfully by a user who can ssh to
# localhost without a passphrase.  Since no Rocks-defined user (including root)
# can normally do this, this variable may need to be overridden on the make
# command line.
data-transfer_USER = $(USER)

mkl_MAKE = $(intel_MAKE) ROLLNAME=mkl

LOG_FILE = $(shell /bin/date +%F-%T-`basename $(THIS_MAKEFILE)`.log)

VANILLA_ROLLS = mkl
$(foreach roll,$(ALL_ROLLS),$(if $(filter $(roll),$(RESTRICTED_ROLLS)),,$(eval VANILLA_ROLLS += $(roll))))

build-and-test-all:
	for F in $(VANILLA_ROLLS); do \
	  $(MAKE) LOG_FILE=$(LOG_FILE) -f $(THIS_MAKEFILE) $$F-build-and-test || true; \
	  if ! echo "$(ALL_PREREQS)" | grep -q "\"<$$F\>"; then \
	    $(MAKE) -f $(THIS_MAKEFILE) $$F-uninstall; \
	  fi; \
	done

clean:
	for F in mkl $(VANILLA_ROLLS); do \
	  $(MAKE) -f $(THIS_MAKEFILE) $$F-uninstall || true; \
	  $(MAKE) -f $(THIS_MAKEFILE) $$F-purge || true; \
	done

%-build-and-test:
	if /bin/echo $(RESTRICTED_ROLLS) | /bin/grep -q "\<$(*)\>"; then \
	  /bin/echo === SKIP $(*) - restricted >> $(LOG_FILE); \
	elif test -x /root/rolltests/$(*).t; then \
	  /bin/echo === SKIP $(*) - preinstalled >> $(LOG_FILE); \
	else \
	  for F in $($(*)_PREREQS); do \
	    /bin/echo === PREREQ $(*) $$F `/bin/date +%F-%T` >> $(LOG_FILE); \
	    $(MAKE) -f $(THIS_MAKEFILE) LOG_FILE="$(LOG_FILE)" $$F-build-and-test || exit 2; \
	  done; \
	  /bin/echo === BUILD $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  $(MAKE) -f $(THIS_MAKEFILE) $(*)-build; \
	  if ! /bin/ls $(*)-roll/*.iso > /dev/null 2>&1; then \
	    /bin/echo === BUILD FAIL $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	    exit 1; \
	  fi; \
	  /bin/echo === BUILD OK $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  /bin/echo === INSTALL $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  $(MAKE) -f $(THIS_MAKEFILE) $(*)-install || true; \
	  /bin/echo === INSTALL OK $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  /bin/echo === TEST $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	  $(MAKE) -f $(THIS_MAKEFILE) $(*)-test >> $(LOG_FILE) 2>&1; \
	  if test $$? -ne 0; then \
	    /bin/echo === TEST FAIL $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	    exit 2; \
	  fi; \
	  /bin/echo === TEST OK $(*) `/bin/date +%F-%T` >> $(LOG_FILE); \
	fi

mkl-roll: intel-roll
	/bin/mv intel-roll mkl-roll

